from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QLabel, QFileDialog, QCheckBox, QLineEdit, QMessageBox, QComboBox
from PyQt5 import uic, QtGui
from PyQt5.QtCore import Qt
from SESAMI_1.user_structure.call_script import calculation_runner
from SESAMI_2.SESAMI_2 import calculation_v2_runner
import sys
import os
import csv
import pandas as pd

# The current working directory.
cwd = os.getcwd()

# Global variable to keep track of the uploaded file's path.
full_path_to_file = None

# Two more global variables.
BET_analysis = ''
BETESW_analysis = ''

class UI(QMainWindow):
    def __init__(self):
        super(UI, self).__init__()

        # Set the title for the window
        self.setWindowTitle('SESAMI GUI')

        # Load the ui file
        uic.loadUi('trial_GUI_4.ui', self)

        ### Define our widgets
        # Options section
        self.versionComboBox = self.findChild(QComboBox, 'versionComboBox')
        self.versionComboBox.addItem('1.0')
        self.versionComboBox.addItem('2.0 (ML)')
        self.gasComboBox = self.findChild(QComboBox, 'gasComboBox')
        self.gasComboBox.addItem('Argon')
        self.gasComboBox.addItem('Nitrogen')
        self.gasComboBox.addItem('CO₂')
        self.gasComboBox.addItem('Krypton')
        self.temperatureLabel = self.findChild(QLabel, 'temperatureLabel')

        self.v1SettingsLabel = self.findChild(QLabel, 'sesami1SettingsLabel')
        self.dpiLabel = self.findChild(QLabel, 'dpiLabel')
        self.dpiLineEdit = self.findChild(QLineEdit, 'dpiLineEdit')
        self.fontSizeLabel = self.findChild(QLabel, 'fontSizeLabel')
        self.fontSizeLineEdit = self.findChild(QLineEdit, 'fontSizeLineEdit')
        self.fontTypeLabel = self.findChild(QLabel, 'fontTypeLabel')
        self.fontTypeComboBox = self.findChild(QComboBox, 'fontTypeComboBox')
        self.fontTypeComboBox.addItem('sans-serif')
        self.fontTypeComboBox.addItem('serif')
        self.fontTypeComboBox.addItem('monospace')
        self.legendLabel = self.findChild(QLabel, 'legendLabel')
        self.legendComboBox = self.findChild(QComboBox, 'legendComboBox')
        self.legendComboBox.addItem('Yes')
        self.legendComboBox.addItem('No')
        self.cutoffLabel = self.findChild(QLabel, 'cutoffLabel')
        self.cutoffLabel.setText('R\u00b2 cutoff') # \u00b2 is 2 in superscript
        self.cutoffLineEdit = self.findChild(QLineEdit, 'cutoffLineEdit')
        self.minLabel = self.findChild(QLabel, 'minLabel')
        self.minLabel.setText('R\u00b2 min') # \u00b2 is 2 in superscript
        self.minLineEdit = self.findChild(QLineEdit, 'minLineEdit')

        self.figureLabel = self.findChild(QLabel, 'figureLabel')
        self.figureComboBox = self.findChild(QComboBox, 'figureComboBox')
        # Five types of plots generated by SESAMI 1.0
        self.figureComboBox.addItem('isotherm')
        self.figureComboBox.addItem('BET')
        self.figureComboBox.addItem('ESW')
        self.figureComboBox.addItem('BETLin')
        self.figureComboBox.addItem('BETESWLin')

        # Upload section
        self.uploadLabel = self.findChild(QLabel, 'uploadLabel')
        self.uploadButtonCSV = self.findChild(QPushButton, 'uploadButtonCSV')
        self.uploadButtonAIF = self.findChild(QPushButton, 'uploadButtonAIF')
        self.uploadedFile = self.findChild(QLabel, 'uploadedFile')
        self.calculationButton = self.findChild(QPushButton, 'calculationButton')

        # Figure display section
        self.pictureElement = self.findChild(QLabel, 'pictureElement')
        self.pictureLabel = self.findChild(QLabel, 'pictureLabel')

        # Analysis section
        self.analysisLabel = self.findChild(QLabel, 'analysisLabel')
        self.analysisComboBox = self.findChild(QComboBox, 'analysesComboBox')
        self.analysisDisplay = self.findChild(QLabel, 'analysisDisplay')

        ### End of widget definitions

        ### Setting the behavior for certain elements.

        self.versionComboBox.currentTextChanged.connect(self.version_change)
        self.gasComboBox.currentTextChanged.connect(self.gas_change)
        self.figureComboBox.currentTextChanged.connect(self.figure_change)
        self.analysisComboBox.currentTextChanged.connect(self.analysis_change)
        self.uploadButtonCSV.clicked.connect(self.uploadClickerCSV)
        self.uploadButtonAIF.clicked.connect(self.uploadClickerAIF)
        self.calculationButton.clicked.connect(self.calculationClicker)

        ### End of behavior setting

        self.clean_slate() # Hiding certain elements.

        # Show the App
        self.show()

    # Runs if the calculation button is clicked.
    def calculationClicker(self):
        global full_path_to_file, BET_analysis, BETESW_analysis

        if full_path_to_file is None or full_path_to_file == '':
            msg = QMessageBox()
            msg.setWindowTitle("Warning")
            msg.setText("You need to upload pressure vs loading data first.");
            msg.setIcon(QMessageBox.Warning) # Sets the icon on the left of the alert.
            msg.exec();
            return

        print(f'full_path_to_file: {full_path_to_file}')
        print(f'End of file path: {full_path_to_file[-3:]}')  

        # Check if the uploaded file is a CSV or AIF.
        # This determines which convert function is called.
        if full_path_to_file[-3:] == 'csv':
            print('Found a csv')
            success = self.CSV_convert()
            if not success:
                return # don't continue with the function
            p0 = None # To be determined later, based on the type of adsorbate and the measurement temperature.
            aif_adsorbate, aif_temperature = None, None
        elif full_path_to_file[-3:] == 'aif':
            print('Found an aif')
            success, p0, aif_adsorbate, aif_temperature = self.AIF_convert()
            if not success:
                return # don't continue with the function

        # Check to make sure the lowest loading divided by the highest loading is not less than 0.05
        # If it is, the isotherm does not have enough low pressure data.
        column_names = ['Pressure', 'Loading']
        data = pd.read_table('SESAMI_1/user_structure/user_isotherm.txt', skiprows=1, sep='\t', names=column_names) # grab the isotherm text file generated by CSV_convert or AIF_convert
        loading_data = list(data['Loading'])
        print(f'Check check {loading_data}')
        if loading_data[0] / loading_data[-1] >= 0.05:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText("Critical, lacking data at low pressure region.");
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec(); 
            return

        # Identifying which gas the user has selected.
        selected_gas = self.gasComboBox.currentText()
        if selected_gas == 'Nitrogen':
            my_temperature = 77.0
        elif selected_gas == 'Argon':
            my_temperature = 87.0
        elif selected_gas == 'CO₂':
            my_temperature = 195.0
        elif selected_gas == 'Krypton':
            my_temperature = 77.0

        ### Check if AIF variables match (temperature and selected gas), in the case the user uploaded an AIF file.
        if not (aif_adsorbate is None):
            bool1 = selected_gas == 'Nitrogen' and aif_adsorbate not in ['nitrogen', 'n2']
            bool2 = selected_gas == 'Argon' and aif_adsorbate not in ['argon', 'ar']
            bool3 = selected_gas == 'CO₂' and aif_adsorbate not in ['carbon dioxide', 'co2']
            bool4 = selected_gas == 'Krypton' and aif_adsorbate not in ['krypton', 'kr']

            if bool1 or bool2 or bool3 or bool4:
                msg = QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("Warning, gas in AIF and checkbox gas do not match. Defaulting to the checkbox selection.");
                msg.setIcon(QMessageBox.Warning) # Sets the icon on the left of the alert.
                msg.exec();

        if not (aif_temperature is None):
            if aif_temperature != my_temperature:
                msg = QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("Warning, temperature in AIF and temperature input line in GUI do not match. Defaulting to the GUI input.");
                msg.setIcon(QMessageBox.Warning) # Sets the icon on the left of the alert.
                msg.exec();
        ### End of the AIF check.

        selected_version = self.versionComboBox.currentText()

        if selected_version == '1.0': # The user has selected to use SESAMI 1.0

            # Grabbing the plotting information
            my_dpi = self.dpiLineEdit.text()
            my_font_size = self.fontSizeLineEdit.text()
            my_font_type = self.fontTypeComboBox.currentText()
            legend_bool = self.legendComboBox.currentText()

            # Grabbing the R^2 settings in the GUI
            R2cutoff = self.cutoffLineEdit.text()
            R2min = self.minLineEdit.text()

            ### Making sure the user has input sensible values.
            try:
                my_dpi = float(my_dpi)
            except ValueError:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the dpi should be a number.");
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec(); 
                return
            if my_dpi < 0 or my_dpi > 5000:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the dpi should be between 0 and 5000."); # TODO maybe tighten this later
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec(); 
                return    

            try:
                my_font_size = float(my_font_size)
            except ValueError:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the font size should be a number.");
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec(); 
                return
            if my_font_size < 5 or my_font_size > 30:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the font size should be between 5 and 30."); # TODO maybe tighten this later
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();    
                return 

            try:
                R2cutoff = float(R2cutoff)
            except ValueError:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the R\u00b2 cutoff should be a number."); # \u00b2 is 2 in superscript
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();
                return
            if R2cutoff < 0.99 or R2cutoff > 1:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the R\u00b2 cutoff should be between 0.99 and 1."); # TODO maybe tighten this later
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();  
                return

            try:
                R2min = float(R2min)
            except ValueError:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the R\u00b2 minimum should be a number."); # \u00b2 is 2 in superscript
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec(); 
                return
            if R2min < 0.95 or R2min > 1:
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("Critical, the R\u00b2 minimum should be between 0.95 and 1."); # TODO maybe tighten this later
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();
                return

            plotting_information = {'dpi': my_dpi, 'font size': my_font_size, 'font type': my_font_type, 'legend': legend_bool,
            'R2 cutoff': R2cutoff, 'R2 min': R2min}

            ### End of the user input check.

            # Running the calculation. Makes plots.
            os.chdir('SESAMI_1/user_structure')
            BET_dict, BET_ESW_dict = calculation_runner(cwd, selected_gas, my_temperature, p0, plotting_information)
            os.chdir(cwd)
            print(f'BET_dict: {BET_dict}')

            # Displaying statistics
            if BET_dict == None or BET_ESW_dict == None:
                self.analysisDisplay.setText('')

                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText("No suitable linear region has been found. Try lowering R\u00b2 min.") # \u00b2 is 2 in superscript
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();     
                return # quit the function      
            else:
                # reformatting
                BET_dict["C"] = '%.4g'%BET_dict["C"]
                BET_dict["qm"] = '%.2f'%BET_dict["qm"]
                BET_dict["A_BET"] = '%.3f'%BET_dict["A_BET"]
                BET_dict["R2"] = '%.6f'%BET_dict["R2"]

                BET_analysis = f'C = {BET_dict["C"]}<br>\
                    q<sub>m</sub> = {BET_dict["qm"]} mol/kg<br>\
                    BET surface area = {BET_dict["A_BET"]} m<sup>2</sup>/g<br>\
                    Consistency 1: Yes<br>\
                    Consistency 2: Yes<br>\
                    Consistency 3: {BET_dict["con3"]}<br>\
                    Consistency 4: {BET_dict["con4"]}<br>\
                    Length of region: {BET_dict["length"]}<br>\
                    R<sup>2</sup>: {BET_dict["R2"]}' # If a linear region is selected, it satisfies criteria 1 and 2. See SI for https://pubs.acs.org/doi/abs/10.1021/acs.jpcc.9b02116

                self.analysisDisplay.setText(BET_analysis)
                self.analysisDisplay.adjustSize() # expand width as needed

                # reformatting
                BET_ESW_dict["C"] = '%.4g'%BET_ESW_dict["C"]
                BET_ESW_dict["qm"] = '%.2f'%BET_ESW_dict["qm"]
                BET_ESW_dict["A_BET"] = '%.3f'%BET_ESW_dict["A_BET"]
                BET_ESW_dict["R2"] = '%.6f'%BET_ESW_dict["R2"]

                BETESW_analysis = f'C = {BET_ESW_dict["C"]}<br>\
                    q<sub>m</sub> = {BET_ESW_dict["qm"]} mol/kg<br>\
                    BET surface area = {BET_ESW_dict["A_BET"]}m<sup>2</sup>/g<br>\
                    Consistency 1: Yes<br>\
                    Consistency 2: Yes<br>\
                    Consistency 3: {BET_ESW_dict["con3"]}<br>\
                    Consistency 4: {BET_ESW_dict["con4"]}<br>\
                    Length of region: {BET_ESW_dict["length"]}<br>\
                    R<sup>2</sup>: {BET_ESW_dict["R2"]}' # If a linear region is selected, it satisfies criteria 1 and 2. See SI for https://pubs.acs.org/doi/abs/10.1021/acs.jpcc.9b02116

            # Showing certain check boxes.

            self.figureLabel.show()
            self.figureComboBox.show()

            self.analysisLabel.show()
            self.analysisDisplay.show()                        
            self.analysisComboBox.show()
            self.analysisComboBox.clear()
            self.analysisComboBox.addItem('BET')
            self.analysisComboBox.addItem('BET-ESW')

            self.pictureLabel.hide()

            # Changing out the image (plots)
            self.pictureElement.setPixmap(QtGui.QPixmap('Isotherm_user_isotherm.jpg'))

        elif selected_version == '2.0 (ML)': # The user has selected to use SESAMI 2.0
            SA_prediction = calculation_v2_runner() # get the surface area prediction
            self.analysisDisplay.setText(f'{SA_prediction:.2f} m<sup>2</sup>/g')
            self.analysisDisplay.adjustSize() # expand to fit all the text

            self.analysisLabel.show()
            self.analysisDisplay.show()            
            self.analysisComboBox.show()
            self.analysisComboBox.clear()
            self.analysisComboBox.addItem('Machine learning prediction')


    # Runs if the SESAMI version is changed.
    def version_change(self):
        # Clearing the GUI information displays.
        self.clean_slate() 

        # Clearing all of the options from the gas combo box.
        self.gasComboBox.clear()

        selected_version = self.versionComboBox.currentText()

        # The SESAMI 2.0 code assumes argon gas. So we hide all other gas options if SESAME 2.0 is selected.
        if selected_version == '1.0':
            self.gasComboBox.addItem('Argon')
            self.gasComboBox.addItem('Nitrogen')
            self.gasComboBox.addItem('CO₂')
            self.gasComboBox.addItem('Krypton')

            self.v1SettingsLabel.show()
            self.dpiLabel.show()
            self.dpiLineEdit.show()
            self.fontSizeLabel.show()
            self.fontSizeLineEdit.show()
            self.fontTypeLabel.show()
            self.fontTypeComboBox.show()
            self.legendLabel.show()
            self.legendComboBox.show()
            self.cutoffLabel.show()
            self.cutoffLineEdit.show()
            self.minLabel.show()
            self.minLineEdit.show()

        elif selected_version == '2.0 (ML)':
            self.gasComboBox.addItem('Argon')

    # Runs if the type of gas is changed.
    def gas_change(self):
        selected_gas = self.gasComboBox.currentText()

        if selected_gas == 'Nitrogen':
            self.temperatureLabel.setText('Temperature: 77K')
        elif selected_gas == 'Argon':
            self.temperatureLabel.setText('Temperature: 87K')
        elif selected_gas == 'CO₂':
            self.temperatureLabel.setText('Temperature: 195K')
        elif selected_gas == 'Krypton':
            self.temperatureLabel.setText('Temperature: 77K')

    # Runs if the plot type is changed.
    def figure_change(self): 
        selected_gas = self.figureComboBox.currentText()

        if selected_gas == 'isotherm':
            self.pictureElement.setPixmap(QtGui.QPixmap('Isotherm_user_isotherm.jpg'))
        elif selected_gas == 'BET':
            self.pictureElement.setPixmap(QtGui.QPixmap('BETPlot_user_isotherm.jpg'))
        elif selected_gas == 'ESW':
            self.pictureElement.setPixmap(QtGui.QPixmap('ESWPlot_user_isotherm.jpg'))
        elif selected_gas == 'BETLin':
            self.pictureElement.setPixmap(QtGui.QPixmap('BETPlot2_user_isotherm.jpg'))
        elif selected_gas == 'BETESWLin':
            self.pictureElement.setPixmap(QtGui.QPixmap('BETESWPlot_user_isotherm.jpg'))                                    

    # Runs if the analysis type is changed.
    def analysis_change(self):
        global BET_analysis, BETESW_analysis

        selected_analysis = self.analysisComboBox.currentText()

        if selected_analysis == 'BET':
            self.analysisDisplay.setText(BET_analysis)
        elif selected_analysis == 'BET-ESW':
            self.analysisDisplay.setText(BETESW_analysis)
        self.analysisDisplay.adjustSize()

    # Runs if the upload CSV button is clicked.
    def uploadClickerCSV(self):
        global full_path_to_file

        self.clean_slate() # Clearing the GUI information displays.

        # Starts search in the current working directory.
        # Only searches for CSV files.
        fname = QFileDialog.getOpenFileName(self, 'Open File', cwd, 'CSV files (*.csv)') 
            # fname is a tuple. File name, and type

        # Output filename to screen
        if fname: # Means the user selected a file. Did not close out of the file selector.
            full_path_to_file = fname[0]
            # print(f'full_path_to_file: {full_path_to_file}')
            # print(full_path_to_file == '')

            # Want to extract only the name of the CSV file
            split_path = full_path_to_file.split('/')

            # Accounting for windows (uses back slashes for paths)
            if len(split_path) == 0:
                split_path = full_path_to_file.split('\\')

            self.uploadedFile.setText(f'CSV: {split_path[-1]}') # The last entry in the list should be the CSV file.
            self.uploadedFile.adjustSize() # expand width as needed

    # Runs if the upload AIF button is clicked.
    def uploadClickerAIF(self):
        global full_path_to_file

        self.clean_slate() # Clearing the GUI information displays.

        # Starts search in the current working directory.
        # Only searches for AIF files.
        fname = QFileDialog.getOpenFileName(self, 'Open File', cwd, 'AIF files (*.aif)') 
            # fname is a tuple. File name, and type

        # Output filename to screen
        if fname: # Means the user selected a file. Did not close out of the file selector.
            full_path_to_file = fname[0]
            # print(f'full_path_to_file: {full_path_to_file}')
            # print(full_path_to_file == '')

            # Want to extract only the name of the AIF file
            split_path = full_path_to_file.split('/')

            # Accounting for windows (uses back slashes for paths)
            if len(split_path) == 0:
                split_path = full_path_to_file.split('\\')

            self.uploadedFile.setText(f'AIF: {split_path[-1]}') # The last entry in the list should be the AIF file.
            self.uploadedFile.adjustSize() # expand width as needed

    # Clears the figure area and the statistics
    def clean_slate(self):
        global full_path_to_file
        full_path_to_file = None

        # Clearing out the figure display.
        self.pictureElement.setPixmap(QtGui.QPixmap(''))

        # Hiding certain elements that should only show after SESAMI code has run.

        selected_version = self.versionComboBox.currentText()

        if selected_version == '2.0 (ML)':
            # Hide the SESAMI 1.0 stuff
            self.v1SettingsLabel.hide()
            self.dpiLabel.hide()
            self.dpiLineEdit.hide()
            self.fontSizeLabel.hide()
            self.fontSizeLineEdit.hide()
            self.fontTypeLabel.hide()
            self.fontTypeComboBox.hide()
            self.legendLabel.hide()
            self.legendComboBox.hide()
            self.cutoffLabel.hide()
            self.cutoffLineEdit.hide()
            self.minLabel.hide()
            self.minLineEdit.hide()

        self.figureLabel.hide()
        self.figureComboBox.hide()

        self.analysisLabel.hide()
        self.analysisComboBox.hide()
        self.analysisDisplay.hide()

        self.pictureLabel.show()

        self.uploadedFile.setText(f'CSV:')

        # Resetting the SESAMI 1.0 settings
        self.dpiLineEdit.setText('600')
        self.fontSizeLineEdit.setText('10') 
        self.fontTypeComboBox.setCurrentText('sans-serif')
        self.legendComboBox.setCurrentText('Yes')
        self.cutoffLineEdit.setText('0.9995')
        self.minLineEdit.setText('0.998')

    # Convert the uploaded CSV to an isotherm data file.
    # Returns one variable named success, which indicates if CSV conversion was successful.
    def CSV_convert(self):
        global full_path_to_file

        if full_path_to_file == '': # No file is selected.
            return 0

        # print(f'Check: {full_path_to_file}')
        with open('SESAMI_1/user_structure/user_isotherm.txt', 'w') as output_file:
            with open(full_path_to_file, 'r') as input_file:
                [output_file.write("\t".join(row)+'\n') for row in csv.reader(input_file)] # \t is tab


        ### Next, checking to make sure the CSV did not have errors in it.

        # Some error handling
        if os.stat('SESAMI_1/user_structure/user_isotherm.txt').st_size == 0:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText('An empty CSV is invalid. Please refer to the example CSV.');
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0

        data = pd.read_table('SESAMI_1/user_structure/user_isotherm.txt', skiprows=1, sep='\t')

        if data.shape[1] != 2:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText('Wrong number of columns in the CSV. There should be two. Please refer to the example CSV.');
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0

        column_names = ['Pressure', 'Loading']
        data = pd.read_table('SESAMI_1/user_structure/user_isotherm.txt', skiprows=1, sep='\t', names=column_names)        
            # Adjustment from SI code: skipping 1 row rather than three
        dataTypeSeries = data.dtypes # Series object containing the data type objects of each column of the DataFrame.

        # For each column, check its type. If it is not of int64 or float64 type, raise an Exception.
        for col in column_names:
            if self.type_number(dataTypeSeries[col]): 
                # non numbers in this column
                msg = QMessageBox()
                msg.setWindowTitle("Critical")
                msg.setText('The CSV must contain numbers only. Please refer to the example CSV.') # TODO provide example
                msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
                msg.exec();
                return 0

        # Checking for NaN values
        if data.isnull().values.any():
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText('The CSV cannot have any empty cells (gaps), since they lead to NaN values. Please refer to the example CSV.') # TODO provide example
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0

        # Checking to ensure the first row of the CSV reads Pressure, Loading
        data_header = pd.read_table('SESAMI_1/user_structure/user_isotherm.txt', nrows=1, sep='\t', names=column_names) 
        if (data_header['Pressure'][0] != 'Pressure (Pa)') or (data_header['Loading'][0] != 'Loading (mol/kg)'):
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText('The CSV does not have the correct first row. The first entries of the two columns should be Pressure (Pa) and Loading (mol/kg), respectively. Please refer to the example CSV.')
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0

        return 1 


    # Function to check if a type is a number.
    def type_number(self, my_type):
        return not (my_type == 'int64' or my_type == 'float64') # true if my_type is not a number

    # Convert the uploaded AIF to an isotherm data file.
    # Returns four variables.
    # The first is named success, which indicates if CSV conversion was successful. 0 if not, 1 is yes.
    # Also returns the saturation pressure, adsorbate, and temperature reported in the AIF file.
    def AIF_convert(self):
        global full_path_to_file

        if full_path_to_file == '': # No file is selected.
            return 0, None, None, None

        # print('Still in AIF convert')

        with open(full_path_to_file) as f:
            content = f.readlines()

        # Setting these variables to None to start off
        aif_adsorbate = None
        aif_temperature = None
            
        ##
        # Check all lines in the AIF text.
        # Find the adsorptive line.
        for line in content:
            if '_exptl_adsorptive' in line:
                # print('found adsorptive line')
                # print(f'line: {line}')
                split_line = line.split() # split on spaces
                adsorbed_gas = split_line[1].lower() # get the gas
                if len(split_line) > 2:
                    adsorbed_gas = adsorbed_gas + ' ' + split_line[2].lower() # deals with the carbon dioxide case of a two word adsorptive

                aif_adsorbate = adsorbed_gas

                break # found the exptl adsorptive line, so don't need to continue with this
        ##

        # Check all lines in the AIF text.
        # Find the temperature line.
        for line in content:
            if '_exptl_temperature' in line:
                split_line = line.split() # split on spaces
                experimental_temperature = split_line[1]
                aif_temperature = float(experimental_temperature)

        # Making sure that aif_temperature is in Kelvin
        units_temperature = None
        for line in content:
            if '_units_temperature' in line:
                units_temperature = line.split() # split on spaces
                units_temperature = units_temperature[1]
                break

        if units_temperature is None or units_temperature.lower() in ['k', 'kelvin']:
            pass # assume Kelvin by default
        elif units_temperature.lower() in ['c', 'celsius']: # Celsius
            if aif_temperature is not None:
                aif_temperature += 273.15 # Converting from celsius to kelvin
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText(f'Invalid/unsupported temperatures units in AIF file. Supported units are Kelvin and Celsius');
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None 


        # Check all lines in the AIF text.
        # Want to find the adsorption data, in order to convert to an isotherm data file.
        start_idx = None # Will instatiate in the loop below.
        end_idx = None # Will instatiate in the loop below.
        for idx, line in enumerate(content):
            if line[:5] == 'loop_' and content[idx+1][:16] == '_adsorp_pressure' and \
            content[idx+2][:10] == '_adsorp_p0' and content[idx+3][:14] == '_adsorp_amount': # getting only the first 5/16/10/14 characters of respective lines
                start_idx = idx
                break # No need to keep checking. We found the start of the adsorption data.
        if start_idx == None:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText("Incorrectly formatted AIF file. Please see example file."); # TODO provide an example file
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None
            # raise Exception('Incorrectly formatted AIF file. Please see example file.') 

        # quote from AIF paper Langmuir 2021, 37, 4222−4226: "The data loops, as used here, are terminated by a new data item, a new data loop, or an end of file"
        # Code block below grabs the adsorption data from the AIF file.
        counter = 0
        full_adsorption_data = []
        while True:
            # Note, we have start_idx + 4 because want to skip the first three lines, which are _adsorp_pressure, _adsorp_p0, and _adsorp_amount
            if (start_idx + 4 + counter) >= len(content): # termination by end of file
                break 

            line = content[start_idx + 4 + counter]

            if line[0] == '_': # termination by a new data item
                break
            if line[:5] == 'loop_': # termination by a new data loop
                break

            full_adsorption_data.append(line)

            counter += 1

        if len(full_adsorption_data) == 0:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText("Missing adsorption data in the AIF file.");
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None
            # raise Exception('Missing adsorption data in the AIF file.')

        # Now, we have all of the adsorption data in the variable full_adsorption_data.

        # Next, find the units of loading
        units_loading = None
        for line in content:
            if '_units_loading' in line:
                units_loading = line.split() # split on spaces
                units_loading = units_loading[1]
                break

        # print(f'units_loading: {units_loading}')
        if units_loading == None:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText("Incorrectly formatted AIF file. Did not include units of loading.");
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None
            # raise Exception('Incorrectly formatted AIF file. Did not include units of loading.')
        supported_units_loading = ['mol/kg', 'mmol/g'] # TODO expand on allowed units in the future
        if units_loading not in supported_units_loading: 
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText(f'Invalid/unsupported loading units in AIF file. Supported units are {supported_units_loading}');
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None          
            # raise Exception(f'Invalid/unsupported loading units in AIF file. Supported units are {supported_units}')

        # Grabbing just the adsorption amount data
        adsorption_data = [item.split()[2] for item in full_adsorption_data] # Get the third element of each row (after splitting on spaces)
        # print(f'adsorption_data: {adsorption_data}')

        # Convert adsorption_data to mol/kg
        if units_loading == 'mmol/g':
            conversion_multiplier =  1
            adsorption_data = [datum * conversion_multiplier for datum in adsorption_data] # Results in a list with entries of the correct units
        elif units_loading == 'mol/kg':
            pass # No action needed.

        # Next, find the units of pressure
        units_pressure = None
        for line in content:
            if '_units_pressure' in line:
                units_pressure = line.split() # split on spaces
                units_pressure = units_pressure[1]


        if units_pressure == None:
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText("Incorrectly formatted AIF file. Did not include units of pressure.");
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None
        supported_units_pressure = ['Pa', 'pascal', 'bar'] # TODO expand on allowed units in the future
        if units_pressure not in supported_units_pressure: 
            msg = QMessageBox()
            msg.setWindowTitle("Critical")
            msg.setText(f'Invalid/unsupported pressure units in AIF file. Supported units are {supported_units_pressure}');
            msg.setIcon(QMessageBox.Critical) # Sets the icon on the left of the alert.
            msg.exec();
            return 0, None, None, None

        # Grabbing just the pressure data
        pressure_data = [item.split()[0] for item in full_adsorption_data] # Get the first element of each row (after splitting on spaces)

        # Grabbing just the p0 data
        saturation_pressure_data = [item.split()[1] for item in full_adsorption_data] # Get the second element of each row (after splitting on spaces)
        saturation_pressure = saturation_pressure_data[0] # All elements in saturation_pressure_data should be the same anyway. Since saturation pressure depends on the temperature and adsorbate type, and these aren't changing.
        p0 = float(saturation_pressure)

        # Note to self. I don't think we need to do unit conversion for the pressures, since we always use p/p0 anyway. TODO
        # # Convert adsorption_data to mol/kg
        # if units_pressure in ['Pa', 'pascal']:
        #   conversion_multiplier =  1
        #   pressure_data = [datum * conversion_multiplier for datum in pressure_data] # Results in a list with entries of the correct units

        # elif units_loading == 'mol/kg':
        #   pass # No action needed.

        with open('SESAMI_1/user_structure/user_isotherm.txt', 'w') as output_file:
            with open(full_path_to_file, 'r') as input_file:
                output_file.write("\t".join(['Pressure', 'Loading'])+'\n') # The column titles
                [output_file.write("\t".join([pressure_data[i], adsorption_data[i]])+'\n') for i in range(len(pressure_data))] # \t is tab          
                # join on tabs, and add a new line after each join

        return 1, p0, aif_adsorbate, aif_temperature

# Initialize the App
app = QApplication(sys.argv)
UIWindow = UI()
app.exec_()